import pandas as pd
import datetime

# Load data from CSV files
orders_df = pd.read_csv('Orders.csv')  # Order details: product, quantity, deadline, customer
inventory_df = pd.read_csv('inventory.csv')  # Inventory data: product, stock_level
transport_df = pd.read_csv('transport.csv')  # Transport data: vehicle, capacity, availability
production_df = pd.read_csv('production.csv')  # Production schedules: product, quantity, finish_time
compliance_df = pd.read_csv('compliance.csv')  # Legal and regulatory data: shipment, compliance_status

# Function to check stock availability
def check_inventory(order):
    product = order['product']
    required_quantity = order['quantity']
    available_stock = inventory_df[inventory_df['product'] == product]['stock_level'].values[0]
    return available_stock >= required_quantity

# Function to evaluate transportation needs
def evaluate_transport(order):
    product = order['product']
    quantity = order['quantity']
    available_transport = transport_df[transport_df['availability'] == 'Available']
    suitable_vehicle = available_transport[available_transport['capacity'] >= quantity]
    return not suitable_vehicle.empty

# Function to align production with order
def align_production(order):
    product = order['product']
    deadline = pd.to_datetime(order['deadline'])
    production_schedule = production_df[production_df['product'] == product]
    if production_schedule.empty:
        return False
    finish_time = pd.to_datetime(production_schedule['finish_time'].values[0])
    return finish_time <= deadline

# Function to check compliance
def check_compliance(order):
    shipment_id = order['shipment_id']
    compliance_status = compliance_df[compliance_df['shipment'] == shipment_id]['compliance_status'].values[0]
    return compliance_status == 'Compliant'

# Processing orders with intermediate steps
def process_orders(orders_df):
    print("Checking inventory availability...")
    orders_df['inventory_status'] = orders_df.apply(check_inventory, axis=1)
    print(orders_df[['order_id', 'inventory_status']])

    print("\nEvaluating transport needs...")
    orders_df['transport_status'] = orders_df.apply(evaluate_transport, axis=1)
    print(orders_df[['order_id', 'transport_status']])

    print("\nAligning production schedules...")
    orders_df['production_status'] = orders_df.apply(align_production, axis=1)
    print(orders_df[['order_id', 'production_status']])

    print("\nChecking compliance...")
    orders_df['compliance_status'] = orders_df.apply(check_compliance, axis=1)
    print(orders_df[['order_id', 'compliance_status']])

    print("\nCompiling checklist status...")
    orders_df['checklist_status'] = orders_df.apply(
        lambda row: all([row['inventory_status'], row['transport_status'], row['production_status'], row['compliance_status']]),
        axis=1
    )
    print(orders_df[['order_id', 'checklist_status']])

    return orders_df

# Run the checklist
processed_orders = process_orders(orders_df)

# Save the results
processed_orders.to_csv('processed_orders.csv', index=False)
print("\nOrder checklist processing complete. Results saved to 'processed_orders.csv'.")

data = pd.read_csv('processed_orders.csv')

# Inspect the dataset
print(data)
